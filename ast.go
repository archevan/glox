package main

// -- AUTOGENERATED FILE -- (see scripts/generate_ast.py for details...)
// This is a simple implementation of the Visitor pattern from OOP
type Visitor interface {
	VisitBinaryExpr(c *BinaryExpr)
	VisitGrouping(c *Grouping)
	VisitLiteral(c *Literal)
	VisitUnary(c *Unary)
}

type Expr interface {
	accept(Visitor)
}

// BinaryExpr is a simple type of AST node
type BinaryExpr struct {
	left Expr
	op Token
	right Expr
}

// accept method stub for BinaryExpr
func (c * BinaryExpr) accept(v Visitor) {
	v.VisitBinaryExpr(c)
}

// Grouping is a simple type of AST node
type Grouping struct {
	exp Expr
}

// accept method stub for Grouping
func (c * Grouping) accept(v Visitor) {
	v.VisitGrouping(c)
}

// Literal is a simple type of AST node
type Literal struct {
	val interface{}
}

// accept method stub for Literal
func (c * Literal) accept(v Visitor) {
	v.VisitLiteral(c)
}

// Unary is a simple type of AST node
type Unary struct {
	op Token
	right Expr
}

// accept method stub for Unary
func (c * Unary) accept(v Visitor) {
	v.VisitUnary(c)
}
